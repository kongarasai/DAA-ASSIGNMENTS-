class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def build_huffman_tree(characters, frequencies):
    if len(characters) != len(frequencies):
        raise ValueError("Characters and frequencies must have the same length")
    
    nodes = []
    for char, freq in zip(characters, frequencies):
        nodes.append(TreeNode((char, freq)))
    
    while len(nodes) > 1:
        nodes.sort(key=lambda x: x.val[1])
        left = nodes.pop(0)
        right = nodes.pop(0)
        parent = TreeNode((None, left.val[1] + right.val[1]), left, right)
        nodes.append(parent)
    
    return nodes[0] if nodes else None

def huffman_codes(root):
    codes = {}
    
    def traverse(node, code):
        if node:
            if node.val[0] is not None:  # It's a leaf node
                codes[node.val[0]] = code
            else:
                traverse(node.left, code + '0')
                traverse(node.right, code + '1')
    
    traverse(root, '')
    return codes

def huffman_decode(root, encoded_string):
    if not root:
        return ""
    
    decoded_message = []
    current_node = root
    for bit in encoded_string:
        if bit == '0':
            current_node = current_node.left
        elif bit == '1':
            current_node = current_node.right
        
        if current_node.val[0] is not None:
            decoded_message.append(current_node.val[0])
            current_node = root
    
    return ''.join(decoded_message)

# Example usage:
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]
encoded_string = '1101100111110'

# Build Huffman tree
huffman_tree = build_huffman_tree(characters, frequencies)

# Generate Huffman codes
huffman_codes_dict = huffman_codes(huffman_tree)

# Decode the encoded string
decoded_message = huffman_decode(huffman_tree, encoded_string)
print(decoded_message)  # Output: "abacd"
