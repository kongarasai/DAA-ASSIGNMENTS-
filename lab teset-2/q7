import math

def closest_pair_of_points(points):
    def distance(p1, p2):
        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

    def closest_pair_strip(strip, d):
        min_dist = d
        strip.sort(key=lambda x: x[1])
        for i in range(len(strip)):
            for j in range(i + 1, len(strip)):
                if (strip[j][1] - strip[i][1]) < min_dist:
                    min_dist = min(min_dist, distance(strip[i], strip[j]))
        return min_dist

    def closest_pair_rec(points_sorted_x, points_sorted_y):
        if len(points_sorted_x) <= 3:
            return min((distance(points_sorted_x[i], points_sorted_x[j])
                        for i in range(len(points_sorted_x)) for j in range(i + 1, len(points_sorted_x))), default=float('inf'))

        mid = len(points_sorted_x) // 2
        midpoint = points_sorted_x[mid]

        left_sorted_x = points_sorted_x[:mid]
        right_sorted_x = points_sorted_x[mid:]

        left_sorted_y = list(filter(lambda x: x[0] <= midpoint[0], points_sorted_y))
        right_sorted_y = list(filter(lambda x: x[0] > midpoint[0], points_sorted_y))

        dl = closest_pair_rec(left_sorted_x, left_sorted_y)
        dr = closest_pair_rec(right_sorted_x, right_sorted_y)

        d = min(dl, dr)

        strip = [p for p in points_sorted_y if abs(p[0] - midpoint[0]) < d]
        return min(d, closest_pair_strip(strip, d))

    points_sorted_x = sorted(points, key=lambda x: x[0])
    points_sorted_y = sorted(points, key=lambda x: x[1])
    return closest_pair_rec(points_sorted_x, points_sorted_y)

points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
min_distance = closest_pair_of_points(points)
print("Minimum distance:", min_distance)
