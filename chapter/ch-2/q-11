# Function to find orientation of ordered triplet (p, q, r)
def orientation(p, q, r):
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0  # collinear
    elif val > 0:
        return 1  # clockwise
    else:
        return 2  # counterclockwise

# Function to check if point q lies on segment pr
def on_segment(p, q, r):
    if min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and min(p[1], r[1]) <= q[1] <= max(p[1], r[1]):
        return True
    return False

# Function to find convex hull using brute force approach
def convex_hull_brute_force(points):
    n = len(points)
    if n < 3:
        return None
    
    hull = []
    for i in range(n):
        for j in range(i + 1, n):
            line = (points[i], points[j])
            count_left = 0
            count_right = 0
            for k in range(n):
                if k != i and k != j:
                    orientation_val = orientation(points[i], points[j], points[k])
                    if orientation_val == 1:
                        count_right += 1
                    elif orientation_val == 2:
                        count_left += 1
                    if orientation_val == 0 and on_segment(points[i], points[k], points[j]):
                        count_left += 1
                        count_right += 1
            if count_left == 0 or count_right == 0:
                if points[i] not in hull:
                    hull.append(points[i])
                if points[j] not in hull:
                    hull.append(points[j])
    
    return hull

# Test case
points = [(1, 1), (4, 6), (8, 1), (0, 0), (3, 3)]
convex_hull_points = convex_hull_brute_force(points)
print("Convex Hull Points (in counter-clockwise order):")
print(convex_hull_points)
