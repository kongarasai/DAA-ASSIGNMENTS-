import itertools
import math

# Function to calculate Euclidean distance between two cities
def distance(city1, city2):
    return math.sqrt((city2[0] - city1[0])**2 + (city2[1] - city1[1])**2)

# Function to solve TSP using exhaustive search
def tsp(cities):
    n = len(cities)
    if n < 2:
        return None, None
    
    min_distance = float('inf')
    best_path = None
    
    # Generate all permutations of cities (excluding the starting city)
    for perm in itertools.permutations(range(1, n)):
        current_distance = 0
        path = [cities[0]]
        for i in range(n - 1):
            current_distance += distance(cities[perm[i - 1]], cities[perm[i]])
            path.append(cities[perm[i]])
        current_distance += distance(cities[perm[-1]], cities[0])
        path.append(cities[0])
        
        if current_distance < min_distance:
            min_distance = current_distance
            best_path = path
    
    return min_distance, best_path

# Test cases
cities1 = [(1, 2), (4, 5), (7, 1), (3, 6)]
cities2 = [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)]

distance1, path1 = tsp(cities1)
print("Test Case 1:")
print(f"Shortest Distance: {distance1}")
print(f"Shortest Path: {path1}")

distance2, path2 = tsp(cities2)
print("\nTest Case 2:")
print(f"Shortest Distance: {distance2}")
print(f"Shortest Path: {path2}")
