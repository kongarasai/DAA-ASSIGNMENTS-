def kruskal_mst(n, edges):
    parent = list(range(n))
    rank = [0] * n
    
    def find(u):
        if parent[u] != u:
            parent[u] = find(parent[u])
        return parent[u]
    
    def union(u, v):
        root_u = find(u)
        root_v = find(v)
        if root_u != root_v:
            if rank[root_u] > rank[root_v]:
                parent[root_v] = root_u
            elif rank[root_u] < rank[root_v]:
                parent[root_u] = root_v
            else:
                parent[root_v] = root_u
                rank[root_u] += 1
    
    edges.sort(key=lambda x: x[2])
    mst_edges = []
    total_weight = 0
    
    for u, v, w in edges:
        if find(u) != find(v):
            union(u, v)
            mst_edges.append((u, v, w))
            total_weight += w
    
    return mst_edges, total_weight

# Example usage:
edges1 = [
    (0, 1, 10), (0, 2, 6), (0, 3, 5),
    (1, 3, 15), (2, 3, 4)
]
mst_edges1, total_weight1 = kruskal_mst(4, edges1)
print("Edges in MST:", mst_edges1)
print("Total weight of MST:", total_weight1)

edges2 = [
    (0, 1, 2), (0, 3, 6), (1, 2, 3),
    (1, 3, 8), (1, 4, 5), (2, 4, 7),
    (3, 4, 9)
]
mst_edges2, total_weight2 = kruskal_mst(5, edges2)
print("Edges in MST:", mst_edges2)
print("Total weight of MST:", total_weight2)
