import heapq
import math

def dijkstra(n, graph, source):
    dist = [math.inf] * n
    dist[source] = 0
    pq = [(0, source)]
    
    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]:
            continue
        for v in range(n):
            if graph[u][v] != math.inf:
                if dist[u] + graph[u][v] < dist[v]:
                    dist[v] = dist[u] + graph[u][v]
                    heapq.heappush(pq, (dist[v], v))
    
    return dist

# Example usage:
graph1 = [
    [0, 10, 3, math.inf, math.inf],
    [math.inf, 0, 1, 2, math.inf],
    [math.inf, 4, 0, 8, 2],
    [math.inf, math.inf, math.inf, 0, 7],
    [math.inf, math.inf, math.inf, 9, 0]
]
print(dijkstra(5, graph1, 0))  # Output: [0, 7, 3, 9, 5]

graph2 = [
    [0, 5, math.inf, 10],
    [math.inf, 0, 3, math.inf],
    [math.inf, math.inf, 0, 1],
    [math.inf, math.inf, math.inf, 0]
]
print(dijkstra(4, graph2, 0))  # Output: [0, 5, 8, 9]
