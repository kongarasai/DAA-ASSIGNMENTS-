def is_unique_mst(n, edges, given_mst):
    parent = list(range(n))
    rank = [0] * n
    
    # Find function with path compression
    def find(u):
        if parent[u] != u:
            parent[u] = find(parent[u])
        return parent[u]
    
    # Union function with union by rank
    def union(u, v):
        root_u = find(u)
        root_v = find(v)
        if root_u != root_v:
            if rank[root_u] > rank[root_v]:
                parent[root_v] = root_u
            elif rank[root_u] < rank[root_v]:
                parent[root_u] = root_v
            else:
                parent[root_v] = root_u
                rank[root_u] += 1
    
    # Sorting edges by weight
    edges.sort(key=lambda x: x[2])
    
    # Initialize total weight of the given MST
    total_weight_given = 0
    for u, v, w in given_mst:
        union(u, v)
        total_weight_given += w
    
    # Check for another possible MST
    other_mst = []
    total_weight_other = 0
    for u, v, w in edges:
        if find(u) != find(v):
            union(u, v)
            other_mst.append((u, v, w))
            total_weight_other += w
            if len(other_mst) == n - 1:
                break
    
    # If we found exactly n-1 edges in other_mst, it's another valid MST
    if len(other_mst) == n - 1:
        return total_weight_given, other_mst, total_weight_other
    else:
        return total_weight_given, None, 0  # No other MST found

# Example usage:
n = 4
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]

total_weight_given, other_mst, total_weight_other = is_unique_mst(n, edges, given_mst)
print("Total weight of given MST:", total_weight_given)
if other_mst:
    print("Other MST found:", other_mst)
    print("Total weight of other MST:", total_weight_other)
else:
    print("No other MST found")
