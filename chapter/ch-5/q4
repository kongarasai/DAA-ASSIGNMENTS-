def max_profit_non_overlapping_jobs(startTime, endTime, profit):
    n = len(startTime)
    
    # Combine start, end, and profit into a list of tuples and sort by end time
    jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])
    
    # dp array to store the maximum profit up to each job
    dp = [0] * n
    dp[0] = jobs[0][2]  # Initialize the first job profit
    
    for i in range(1, n):
        current_profit = jobs[i][2]
        last_non_overlap = -1
        
        # Find the last job that does not overlap with the current job
        for j in range(i - 1, -1, -1):
            if jobs[j][1] <= jobs[i][0]:  # endTime of job j <= startTime of job i
                last_non_overlap = j
                break
        
        if last_non_overlap != -1:
            current_profit += dp[last_non_overlap]
        
        # Take the maximum profit by either taking this job or not taking it
        dp[i] = max(dp[i - 1], current_profit)
    
    return dp[n - 1]

# Example usage:
startTime = [1, 2, 3, 3]
endTime = [3, 4, 5, 6]
profit = [50, 10, 40, 70]
print(max_profit_non_overlapping_jobs(startTime, endTime, profit))  # Output: 120

startTime = [1, 2, 3, 4, 6]
endTime = [3, 5, 10, 6, 9]
profit = [20, 20, 100, 70, 60]
print(max_profit_non_overlapping_jobs(startTime, endTime, profit))  # Output: 150
