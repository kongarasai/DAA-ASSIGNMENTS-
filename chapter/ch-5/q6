import heapq
import math

def dijkstra_edge_list(n, edges, source, target):
    graph = {i: [] for i in range(n)}
    for u, v, w in edges:
        graph[u].append((v, w))
    
    dist = [math.inf] * n
    dist[source] = 0
    pq = [(0, source)]
    
    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]:
            continue
        for v, w in graph[u]:
            if dist[u] + w < dist[v]:
                dist[v] = dist[u] + w
                heapq.heappush(pq, (dist[v], v))
    
    return dist[target]

# Example usage:
edges1 = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15), (2, 3, 11),
    (2, 5, 2), (3, 4, 6), (4, 5, 9)
]
print(dijkstra_edge_list(6, edges1, 0, 4))  # Output: 20

edges2 = [
    (0, 1, 10), (0, 4, 3), (1, 2, 2),
    (1, 4, 4), (2, 3, 9), (3, 2, 7),
    (4, 1, 1), (4, 2, 8), (4, 3, 2)
]
print(dijkstra_edge_list(5, edges2, 0, 3))  # Output: 8
