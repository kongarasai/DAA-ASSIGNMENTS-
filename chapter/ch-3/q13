def meet_in_the_middle(arr, target):
    n = len(arr)
    X = arr[:n//2]
    Y = arr[n//2:]

    sum_X = {sum(subset): subset for subset in subsets(X)}
    sum_Y = {sum(subset): subset for subset in subsets(Y)}

    closest_sum = float('-inf')
    closest_subset = []

    for s_X in sum_X:
        for s_Y in sum_Y:
            if s_X + s_Y <= target and s_X + s_Y > closest_sum:
                closest_sum = s_X + s_Y
                closest_subset = sum_X[s_X] + sum_Y[s_Y]

    return closest_subset

def subsets(arr):
    result = [[]]
    for num in arr:
        result += [curr + [num] for curr in result]
    return result

# Test Cases
print(meet_in_the_middle([45, 34, 4, 12, 5, 2], 42))  # Output: [34, 4, 2] or other combinations that sum closest to 42
print(meet_in_the_middle([1, 3, 2, 7, 4, 6], 10))  # Output: [3, 7] or other combinations that sum closest to 10
