def merge_sort_count_comparisons(arr):
    if len(arr) <= 1:
        return arr, 0
    
    mid = len(arr) // 2
    left, left_count = merge_sort_count_comparisons(arr[:mid])
    right, right_count = merge_sort_count_comparisons(arr[mid:])
    merged, merge_count = merge_count(left, right)
    
    return merged, (left_count + right_count + merge_count)

def merge_count(left, right):
    sorted_arr = []
    count = 0
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_arr.append(left[i])
            i += 1
        else:
            sorted_arr.append(right[j])
            j += 1
            count += len(left) - i
    
    sorted_arr.extend(left[i:])
    sorted_arr.extend(right[j:])
    
    return sorted_arr, count

# Test Cases
arr1_unsorted = [12, 4, 78, 23, 45, 67, 89, 1]
arr2_unsorted = [38, 27, 43, 3, 9, 82, 10]

sorted1, count1 = merge_sort_count_comparisons(arr1_unsorted)
print(f"Test Case 1:")
print(f"Sorted Array: {sorted1}")
print(f"Number of Comparisons: {count1}")

sorted2, count2 = merge_sort_count_comparisons(arr2_unsorted)
print(f"\nTest Case 2:")
print(f"Sorted Array: {sorted2}")
print(f"Number of Comparisons: {count2}")
