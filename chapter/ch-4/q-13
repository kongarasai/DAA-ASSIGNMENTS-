def floyd_warshall_link_failure(n, edges, u_fail, v_fail):
    dist = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
    
    for u, v, w in edges:
        dist[u][v] = w
    
    if u_fail < n and v_fail < n:
        dist[u_fail][v_fail] = float('inf')
        dist[v_fail][u_fail] = float('inf')
    
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

# Test Case
n = 6
edges = [
    [0, 1, 1],
    [0, 2, 5],
    [1, 2, 2],
    [1, 3, 1],
    [2, 4, 3],
    [3, 4, 1],
    [3, 5, 6],
    [4, 5, 2]
]
result = floyd_warshall_link_failure(n, edges, 1, 3)
print("Distance Matrix after Link Failure:")
for row in result:
    print(row)

# Finding shortest path from Router A (0) to Router F (5)
router_a = 0
router_f = 5
print(f"Shortest path from Router {router_a} to Router {router_f}:", result[router_a][router_f])
