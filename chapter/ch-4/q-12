import sys

def floyds_algorithm(n, edges):
    # Initialize distances with maximum value
    dist = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
    
    for u, v, w in edges:
        dist[u][v] = w
    
    # Floyd's Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

# Example Usage
n = 4
edges = [
    [0, 1, 3],
    [1, 2, 1],
    [1, 3, 4],
    [2, 3, 1]
]

distances = floyds_algorithm(n, edges)
print("Distance Matrix after Floyd's Algorithm:")
for row in distances:
    print(row)

# Finding shortest path from City 1 to City 3
src = 1
dest = 3
if distances[src][dest] == float('inf'):
    print(f"No path from City {src} to City {dest}")
else:
    print(f"Shortest path from City {src} to City {dest}: {distances[src][dest]}")

# Simulate a change: Link failure from City B to City D
edges[1][3] = float('inf')  # Assuming failure by setting distance to infinity
distances_after_update = floyds_algorithm(n, edges)
print("\nDistance Matrix after link failure:")
for row in distances_after_update:
    print(row)

# Shortest path from City 1 to City 3 after update
if distances_after_update[src][dest] == float('inf'):
    print(f"No path from City {src} to City {dest}")
else:
    print(f"Shortest path from City {src} to City {dest}: {distances_after_update[src][dest]}")
