from itertools import permutations

def tsp_with_extra_city(distances, cities):
    n = len(cities)
    
    # Generate all permutations of cities
    all_permutations = permutations(range(n))
    
    min_distance = float('inf')
    best_route = None
    
    # Iterate through all permutations
    for perm in all_permutations:
        # Calculate the total distance for the current permutation
        total_distance = 0
        for i in range(n):
            current_city = perm[i]
            next_city = perm[(i + 1) % n]
            total_distance += distances[cities[current_city]][cities[next_city]]
        
        # Check if this permutation gives a shorter distance
        if total_distance < min_distance:
            min_distance = total_distance
            best_route = perm
    
    # Construct the best route in terms of city names
    route = [cities[i] for i in best_route]
    route.append(cities[best_route[0]])  # Complete the cycle
    
    return route, min_distance

# Test Case: Symmetric Distances
distances = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20, 'E': 25},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25, 'E': 30},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30, 'E': 20},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0, 'E': 15},
    'E': {'A': 25, 'B': 30, 'C': 20, 'D': 15, 'E': 0}
}

cities = ['A', 'B', 'C', 'D', 'E']

route, min_distance = tsp_with_extra_city(distances, cities)

# Print the results
print("Shortest Route:", "->".join(route))
print("Total Distance:", min_distance)
