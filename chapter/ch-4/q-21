import heapq
from collections import defaultdict, deque

def find_the_city(n, edges, distanceThreshold):
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    
    min_city = -1
    min_reachable = float('inf')
    
    for i in range(n):
        distances = dijkstra(graph, n, i)
        reachable_count = sum(1 for dist in distances if dist <= distanceThreshold)
        
        if reachable_count <= min_reachable:
            min_reachable = reachable_count
            min_city = i
    
    return min_city

def dijkstra(graph, n, start):
    distances = [float('inf')] * n
    distances[start] = 0
    pq = [(0, start)]

    while pq:
        curr_dist, node = heapq.heappop(pq)

        if curr_dist > distances[node]:
            continue

        for neighbor, weight in graph[node]:
            distance = curr_dist + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances

# Test case for Problem 21
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4
print(find_the_city(n, edges, distanceThreshold))  # Output: 3
