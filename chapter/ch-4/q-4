from itertools import permutations

def travelling_salesman_problem(graph, s):
    # store all vertex apart from source vertex
    vertex = []
    for i in range(len(graph)):
        if i != s:
            vertex.append(i)
    
    # store minimum weight Hamiltonian Cycle
    min_path = float('inf')
    next_permutation = permutations(vertex)
    for perm in next_permutation:
        # store current Path weight(cost)
        current_pathweight = 0
        
        # compute current path weight
        k = s
        for j in perm:
            current_pathweight += graph[k][j]
            k = j
        current_pathweight += graph[k][s]
        
        # update minimum
        min_path = min(min_path, current_pathweight)
        
    return min_path

# Test Cases
graph1 = [[0, 10, 15, 20],
          [10, 0, 35, 25],
          [15, 35, 0, 30],
          [20, 25, 30, 0]]

graph2 = [[0, 10, 10, 10],
          [10, 0, 10, 10],
          [10, 10, 0, 10],
          [10, 10, 10, 0]]

graph3 = [[0, 1, 2, 3],
          [1, 0, 4, 5],
          [2, 4, 0, 6],
          [3, 5, 6, 0]]

print(f"Output: {travelling_salesman_problem(graph1, 0)}")  # Expected Output: 80
print(f"Output: {travelling_salesman_problem(graph2, 0)}")  # Expected Output: 40
print(f"Output: {travelling_salesman_problem(graph3, 0)}")  # Expected Output: 12
