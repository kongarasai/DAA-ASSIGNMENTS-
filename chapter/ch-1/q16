def gameOfLife(board):
    if not board:
        return
    
    m, n = len(board), len(board[0])
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]
    
    next_board = [[0] * n for _ in range(m)]
    
    for i in range(m):
        for j in range(n):
            live_neighbors = 0
            
            # Count live neighbors (including diagonals)
            for di, dj in directions:
                ni, nj = i + di, j + dj
                if 0 <= ni < m and 0 <= nj < n and board[ni][nj] == 1:
                    live_neighbors += 1
            
            # Apply rules
            if board[i][j] == 1:
                if live_neighbors < 2 or live_neighbors > 3:
                    next_board[i][j] = 0
                else:
                    next_board[i][j] = 1
            else:
                if live_neighbors == 3:
                    next_board[i][j] = 1
                else:
                    next_board[i][j] = 0
    
    # Update the original board with the next state
    for i in range(m):
        for j in range(n):
            board[i][j] = next_board[i][j]

# Example usage:
board = [
    [0, 1, 0],
    [0, 0, 1],
    [1, 1, 1],
    [0, 0, 0]
]

gameOfLife(board)
print("Next state:")
for row in board:
    print(row)
