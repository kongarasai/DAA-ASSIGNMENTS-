def findPaths(m, n, N, i, j):
    MOD = 10**9 + 7
    dp_prev = [[0] * n for _ in range(m)]
    dp_prev[i][j] = 1
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    result = 0

    for _ in range(N):
        dp_curr = [[0] * n for _ in range(m)]
        for r in range(m):
            for c in range(n):
                if dp_prev[r][c] > 0:
                    for dr, dc in directions:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < m and 0 <= nc < n:
                            dp_curr[nr][nc] = (dp_curr[nr][nc] + dp_prev[r][c]) % MOD
                        else:
                            result = (result + dp_prev[r][c]) % MOD
        dp_prev = dp_curr

    return result

# Example usage:
m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
print("Output:", findPaths(m1, n1, N1, i1, j1))  # Output: 6

m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
print("Output:", findPaths(m2, n2, N2, i2, j2))  # Output: 12
