from heapq import heappush, heappop

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    min_heap = []
    
    # Push the first node of each list into the heap
    for i, node in enumerate(lists):
        if node:
            heappush(min_heap, (node.val, i, node))
    
    # Dummy head for the result list
    dummy = ListNode(0)
    current = dummy
    
    while min_heap:
        # Get the smallest element from the heap
        val, i, node = heappop(min_heap)
        # Add the smallest element to the result list
        current.next = ListNode(val)
        current = current.next
        # Move to the next element in the same list and push it into the heap
        if node.next:
            heappush(min_heap, (node.next.val, i, node.next))
    
    return dummy.next

# Helper function to print linked list
def printLinkedList(head):
    while head:
        print(head.val, end=" -> ")
        head = head.next
    print("None")

# Example usage
list1 = ListNode(1, ListNode(4, ListNode(5)))
list2 = ListNode(1, ListNode(3, ListNode(4)))
list3 = ListNode(2, ListNode(6))

lists = [list1, list2, list3]
merged_head = mergeKLists(lists)
printLinkedList(merged_head)  # Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6 -> None
