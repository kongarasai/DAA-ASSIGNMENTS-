import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __lt__(self, other):
        
        return self.val < other.val

def mergeKLists(lists):
    
    min_heap = []
    
    
    for l in lists:
        if l:
            heapq.heappush(min_heap, l)
    
    
    dummy = ListNode()
    current = dummy
    
    
    while min_heap:
        
        smallest_node = heapq.heappop(min_heap)
        
        current.next = smallest_node
        current = current.next
        
        if smallest_node.next:
            heapq.heappush(min_heap, smallest_node.next)
    
    
    return dummy.next


def array_to_linked_list(arr):
    dummy = ListNode()
    current = dummy
    for num in arr:
        current.next = ListNode(num)
        current = current.next
    return dummy.next


def linked_list_to_array(node):
    array = []
    while node:
        array.append(node.val)
        node = node.next
    return array


lists = [
    array_to_linked_list([1, 4, 5]),
    array_to_linked_list([1, 3, 4]),
    array_to_linked_list([2, 6])
]

merged_head = mergeKLists(lists)
print(linked_list_to_array(merged_head))  
