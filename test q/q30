class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def sortedArrayToBST(nums):
    def construct_bst(left, right):
        if left > right:
            return None
        
        mid = (left + right) // 2
        node = TreeNode(nums[mid])
        node.left = construct_bst(left, mid - 1)
        node.right = construct_bst(mid + 1, right)
        return node
    
    return construct_bst(0, len(nums) - 1)

# Example usage:
nums = [-10, -3, 0, 5, 9]
root = sortedArrayToBST(nums)
# Printing the tree using a simple in-order traversal to visualize the output.
def inorder_traversal(node):
    if not node:
        return []
    return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)

print(inorder_traversal(root))  # Output: [-10, -3, 0, 5, 9]
