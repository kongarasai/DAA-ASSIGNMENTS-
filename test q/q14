def sortList(head: ListNode) -> ListNode:
    if not head or not head.next:
        return head

    # Function to find the middle of the list
    def getMiddle(head):
        slow, fast = head, head
        prev = None
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        if prev:
            prev.next = None
        return slow

    # Function to merge two sorted lists
    def merge(l1, l2):
        dummy = ListNode()
        tail = dummy
        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next
        tail.next = l1 if l1 else l2
        return dummy.next

    middle = getMiddle(head)
    left = sortList(head)
    right = sortList(middle)

    return merge(left, right)

# Helper function to create linked list from a list
def createLinkedList(arr):
    dummy = ListNode()
    current = dummy
    for value in arr:
        current.next = ListNode(value)
        current = current.next
    return dummy.next

# Helper function to print linked list
def printLinkedList(head):
    current = head
    result = []
    while current:
        result.append(current.val)
        current = current.next
    print(result)

# Example usage:
head = createLinkedList([4, 2, 1, 3])
sorted_head = sortList(head)
printLinkedList(sorted_head)
