import heapq

def kthSmallest(mat, k):
    def add_to_heap(heap, new_sum, idxs):
        if len(heap) < k or new_sum < -heap[0][0]:
            heapq.heappush(heap, (-new_sum, idxs))
            if len(heap) > k:
                heapq.heappop(heap)
    
    m, n = len(mat), len(mat[0])
    heap = [(-sum(row[0] for row in mat), [0] * m)]
    visited = set()
    visited.add(tuple([0] * m))
    
    while heap:
        curr_sum, indices = heapq.heappop(heap)
        curr_sum = -curr_sum
        k -= 1
        if k == 0:
            return curr_sum
        for i in range(m):
            new_indices = indices[:]
            if new_indices[i] + 1 < n:
                new_indices[i] += 1
                new_tuple = tuple(new_indices)
                if new_tuple not in visited:
                    visited.add(new_tuple)
                    new_sum = curr_sum - mat[i][indices[i]] + mat[i][new_indices[i]]
                    add_to_heap(heap, new_sum, new_indices)
    return -1


mat1 = [[1, 3, 11], [2, 4, 6]]
k1 = 5
print(kthSmallest(mat1, k1))  # Output: 7

mat2 = [[1, 3, 11], [2, 4, 6]]
k2 = 9
print(kthSmallest(mat2, k2))  # Output: 17

mat3 = [[1, 10, 10], [1, 4, 5], [2, 3, 6]]
k3 = 7
print(kthSmallest(mat3, k3))  # Output: 9
