def max_subarray_sum_circular(nums):
    def kadane(nums):
        max_sum = float('-inf')
        current_sum = 0
        for num in nums:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        return max_sum

    total_sum = sum(nums)
    max_kadane_sum = kadane(nums)
    min_kadane_sum = kadane([-num for num in nums])
    max_circular_sum = total_sum + min_kadane_sum if min_kadane_sum != 0 else max_kadane_sum
    return max(max_kadane_sum, max_circular_sum)

# Example usage:
nums = [1, -2, 3, -2]
print(max_subarray_sum_circular(nums))  # Output: 3
